// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Email templates
model EmailTemplate {
  id              String            @id @default(uuid())
  name            String
  description     String?
  defaultContent  String            @db.Text
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          String?
  user            User?             @relation(fields: [userId], references: [id])
  isSystem        Boolean           @default(false)
  variables       TemplateVariable[]
  previewData     PreviewData[]
  templateFolder  TemplateFolder?   @relation(fields: [foldererId], references: [id])
  foldererId      String?
  background      EmailTemplateBackground?
}

// Template variables
model TemplateVariable {
  id              String          @id @default(uuid())
  key             String
  name            String
  type            VariableType    @default(TEXT)
  defaultValue    String?
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  required        Boolean         @default(false)
  emailTemplate   EmailTemplate   @relation(fields: [emailTemplateId], references: [id], onDelete: Cascade)
  emailTemplateId String

  @@unique([emailTemplateId, key])
}

// Preview data for templates
model PreviewData {
  id              String        @id @default(uuid())
  name            String
  data            Json          @db.JsonB
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  emailTemplate   EmailTemplate @relation(fields: [emailTemplateId], references: [id], onDelete: Cascade)
  emailTemplateId String

  @@index([emailTemplateId])
}

// Folders for organizing templates
model TemplateFolder {
  id              String          @id @default(uuid())
  name            String
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String?
  user            User?           @relation(fields: [userId], references: [id])
  parentId        String?
  parent          TemplateFolder? @relation("FolderHierarchy", fields: [parentId], references: [id])
  children        TemplateFolder[] @relation("FolderHierarchy")
  templates       EmailTemplate[]
}

// Saved email templates (used templates with populated variables)
model SavedEmailTemplate {
  id              String        @id @default(uuid())
  name            String
  content         String        @db.Text
  variableValues  Json          @db.JsonB
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  sentEmails      SentEmail[]
}

// Sent emails record
model SentEmail {
  id                  String            @id @default(uuid())
  recipient           String
  subject             String
  content             String            @db.Text
  sentAt              DateTime          @default(now())
  status              EmailStatus       @default(SENT)
  userId              String
  user                User              @relation(fields: [userId], references: [id])
  savedEmailTemplate  SavedEmailTemplate? @relation(fields: [templateId], references: [id])
  templateId          String?
}

// Users
model User {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String?
  templates         EmailTemplate[]
  savedTemplates    SavedEmailTemplate[]
  sentEmails        SentEmail[]
  folders           TemplateFolder[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Enums
enum VariableType {
  TEXT
  DATE
  NUMBER
  EMAIL
  URL
  BOOLEAN
}

enum EmailStatus {
  DRAFT
  SENT
  FAILED
  DELIVERED
  OPENED
}

model EmailTemplateBackground {
  id              String          @id @default(cuid())
  bodyBgColor     String          @default("#D9D9D9")
  containerBgColor String         @default("#FFFFFF")
  headerBgColor   String          @default("#33A8DF")
  contentBgColor  String          @default("#FFFFFF")
  footerBgColor   String          @default("#33A8DF")
  maxWidth        String          @default("650px")
  
  // Relation to the email template
  emailTemplate   EmailTemplate   @relation(fields: [emailTemplateId], references: [id], onDelete: Cascade)
  emailTemplateId String          @unique
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}